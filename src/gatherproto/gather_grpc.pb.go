// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: gather.proto

package gather

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatherService_EndServer_FullMethodName       = "/gatherproto.GatherService/EndServer"
	GatherService_SendMachineInfo_FullMethodName = "/gatherproto.GatherService/SendMachineInfo"
	GatherService_SendStateInfo_FullMethodName   = "/gatherproto.GatherService/SendStateInfo"
)

// GatherServiceClient is the client API for GatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatherServiceClient interface {
	EndServer(ctx context.Context, in *EndServerRequest, opts ...grpc.CallOption) (*EndServerResponse, error)
	SendMachineInfo(ctx context.Context, in *MachineInfoRequest, opts ...grpc.CallOption) (*MachineInfoResponse, error)
	SendStateInfo(ctx context.Context, in *StateInfoRequest, opts ...grpc.CallOption) (*StateInfoResponse, error)
}

type gatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatherServiceClient(cc grpc.ClientConnInterface) GatherServiceClient {
	return &gatherServiceClient{cc}
}

func (c *gatherServiceClient) EndServer(ctx context.Context, in *EndServerRequest, opts ...grpc.CallOption) (*EndServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndServerResponse)
	err := c.cc.Invoke(ctx, GatherService_EndServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatherServiceClient) SendMachineInfo(ctx context.Context, in *MachineInfoRequest, opts ...grpc.CallOption) (*MachineInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineInfoResponse)
	err := c.cc.Invoke(ctx, GatherService_SendMachineInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatherServiceClient) SendStateInfo(ctx context.Context, in *StateInfoRequest, opts ...grpc.CallOption) (*StateInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateInfoResponse)
	err := c.cc.Invoke(ctx, GatherService_SendStateInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatherServiceServer is the server API for GatherService service.
// All implementations must embed UnimplementedGatherServiceServer
// for forward compatibility.
type GatherServiceServer interface {
	EndServer(context.Context, *EndServerRequest) (*EndServerResponse, error)
	SendMachineInfo(context.Context, *MachineInfoRequest) (*MachineInfoResponse, error)
	SendStateInfo(context.Context, *StateInfoRequest) (*StateInfoResponse, error)
	mustEmbedUnimplementedGatherServiceServer()
}

// UnimplementedGatherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatherServiceServer struct{}

func (UnimplementedGatherServiceServer) EndServer(context.Context, *EndServerRequest) (*EndServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndServer not implemented")
}
func (UnimplementedGatherServiceServer) SendMachineInfo(context.Context, *MachineInfoRequest) (*MachineInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMachineInfo not implemented")
}
func (UnimplementedGatherServiceServer) SendStateInfo(context.Context, *StateInfoRequest) (*StateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStateInfo not implemented")
}
func (UnimplementedGatherServiceServer) mustEmbedUnimplementedGatherServiceServer() {}
func (UnimplementedGatherServiceServer) testEmbeddedByValue()                       {}

// UnsafeGatherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatherServiceServer will
// result in compilation errors.
type UnsafeGatherServiceServer interface {
	mustEmbedUnimplementedGatherServiceServer()
}

func RegisterGatherServiceServer(s grpc.ServiceRegistrar, srv GatherServiceServer) {
	// If the following call pancis, it indicates UnimplementedGatherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatherService_ServiceDesc, srv)
}

func _GatherService_EndServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherServiceServer).EndServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatherService_EndServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherServiceServer).EndServer(ctx, req.(*EndServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatherService_SendMachineInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MachineInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherServiceServer).SendMachineInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatherService_SendMachineInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherServiceServer).SendMachineInfo(ctx, req.(*MachineInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatherService_SendStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatherServiceServer).SendStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatherService_SendStateInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatherServiceServer).SendStateInfo(ctx, req.(*StateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatherService_ServiceDesc is the grpc.ServiceDesc for GatherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatherproto.GatherService",
	HandlerType: (*GatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndServer",
			Handler:    _GatherService_EndServer_Handler,
		},
		{
			MethodName: "SendMachineInfo",
			Handler:    _GatherService_SendMachineInfo_Handler,
		},
		{
			MethodName: "SendStateInfo",
			Handler:    _GatherService_SendStateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gather.proto",
}
