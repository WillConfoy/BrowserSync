// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: node.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncServiceClient interface {
	// rpc Message (MessageRequest) returns (MessageResponse) {};
	// rpc AppendEntries (AppendRequest) returns (AppendResponse) {};
	// rpc RequestVote (VoteRequest) returns (VoteResponse) {};
	// rpc MakeCommand (CommandRequest) returns (CommandResponse) {};
	SendClickInternal(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error)
	SendKeyDownInternal(ctx context.Context, in *KeyDownRequest, opts ...grpc.CallOption) (*KeyDownResponse, error)
	SendKeyUpInternal(ctx context.Context, in *KeyUpRequest, opts ...grpc.CallOption) (*KeyUpResponse, error)
	HeartbeatInternal(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	SendScrollInternal(ctx context.Context, in *ScrollRequest, opts ...grpc.CallOption) (*ScrollResponse, error)
	// rpc BecomeLeader (LeaderRequest) returns (LeaderResponse) {};
	UpdateLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) SendClickInternal(ctx context.Context, in *ClickRequest, opts ...grpc.CallOption) (*ClickResponse, error) {
	out := new(ClickResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/SendClickInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) SendKeyDownInternal(ctx context.Context, in *KeyDownRequest, opts ...grpc.CallOption) (*KeyDownResponse, error) {
	out := new(KeyDownResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/SendKeyDownInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) SendKeyUpInternal(ctx context.Context, in *KeyUpRequest, opts ...grpc.CallOption) (*KeyUpResponse, error) {
	out := new(KeyUpResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/SendKeyUpInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) HeartbeatInternal(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/HeartbeatInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) SendScrollInternal(ctx context.Context, in *ScrollRequest, opts ...grpc.CallOption) (*ScrollResponse, error) {
	out := new(ScrollResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/SendScrollInternal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) UpdateLeader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := c.cc.Invoke(ctx, "/nodeproto.SyncService/UpdateLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility
type SyncServiceServer interface {
	// rpc Message (MessageRequest) returns (MessageResponse) {};
	// rpc AppendEntries (AppendRequest) returns (AppendResponse) {};
	// rpc RequestVote (VoteRequest) returns (VoteResponse) {};
	// rpc MakeCommand (CommandRequest) returns (CommandResponse) {};
	SendClickInternal(context.Context, *ClickRequest) (*ClickResponse, error)
	SendKeyDownInternal(context.Context, *KeyDownRequest) (*KeyDownResponse, error)
	SendKeyUpInternal(context.Context, *KeyUpRequest) (*KeyUpResponse, error)
	HeartbeatInternal(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	SendScrollInternal(context.Context, *ScrollRequest) (*ScrollResponse, error)
	// rpc BecomeLeader (LeaderRequest) returns (LeaderResponse) {};
	UpdateLeader(context.Context, *LeaderRequest) (*LeaderResponse, error)
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (UnimplementedSyncServiceServer) SendClickInternal(context.Context, *ClickRequest) (*ClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendClickInternal not implemented")
}
func (UnimplementedSyncServiceServer) SendKeyDownInternal(context.Context, *KeyDownRequest) (*KeyDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyDownInternal not implemented")
}
func (UnimplementedSyncServiceServer) SendKeyUpInternal(context.Context, *KeyUpRequest) (*KeyUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeyUpInternal not implemented")
}
func (UnimplementedSyncServiceServer) HeartbeatInternal(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatInternal not implemented")
}
func (UnimplementedSyncServiceServer) SendScrollInternal(context.Context, *ScrollRequest) (*ScrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendScrollInternal not implemented")
}
func (UnimplementedSyncServiceServer) UpdateLeader(context.Context, *LeaderRequest) (*LeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeader not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_SendClickInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SendClickInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/SendClickInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SendClickInternal(ctx, req.(*ClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_SendKeyDownInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SendKeyDownInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/SendKeyDownInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SendKeyDownInternal(ctx, req.(*KeyDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_SendKeyUpInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SendKeyUpInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/SendKeyUpInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SendKeyUpInternal(ctx, req.(*KeyUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_HeartbeatInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).HeartbeatInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/HeartbeatInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).HeartbeatInternal(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_SendScrollInternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).SendScrollInternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/SendScrollInternal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).SendScrollInternal(ctx, req.(*ScrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_UpdateLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).UpdateLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodeproto.SyncService/UpdateLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).UpdateLeader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodeproto.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendClickInternal",
			Handler:    _SyncService_SendClickInternal_Handler,
		},
		{
			MethodName: "SendKeyDownInternal",
			Handler:    _SyncService_SendKeyDownInternal_Handler,
		},
		{
			MethodName: "SendKeyUpInternal",
			Handler:    _SyncService_SendKeyUpInternal_Handler,
		},
		{
			MethodName: "HeartbeatInternal",
			Handler:    _SyncService_HeartbeatInternal_Handler,
		},
		{
			MethodName: "SendScrollInternal",
			Handler:    _SyncService_SendScrollInternal_Handler,
		},
		{
			MethodName: "UpdateLeader",
			Handler:    _SyncService_UpdateLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
